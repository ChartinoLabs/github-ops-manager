{% for command_data in commands %}
Sample output of `{{ command_data.command }}`:

{% if command_data.parser_used != "YamlPathParse" %}
```cli
{{ command_data.command_output }}
```
{% endif %}
{% if command_data.parser_used=="Genie"%}

A Genie Parser exists for this show command, and results in data like so:
You MUST use a Genie Parser for this `{{ command_data.command }}` command. Pay attention to the Parsing Requirements.

```json
{{ command_data.parsed_output }}
```

{% endif %}
{%if command_data.parser_used=="YamlPathParse"%}
The data for the command or API call `{{ command_data.command }}` is already in a structured and valid YAML or JSON format, which means we can use Robot's "YamlPath Parse" [keyword](https://github.com/wwkimball/yamlpath). The data can be accessed using the following schema (which is the same as the raw output):

You MUST use YamlPath Parse keyword for this `{{ command_data.command }}` command or API call. Pay attention to the Parsing Requirements.

```yaml
{{ command_data.parsed_output }}
```

{% endif %}
{% if command_data.parser_used=="NXOSJSON"%}
Run the command as | json-pretty native (for example: show ip interface brief | json-pretty native), with a resulting JSON body like so:

```json
{{ command_data.parsed_output }}
```

{% endif %}
{% if command_data.parser_used in [None, '', 'Regex'] %}

A RegEx Pattern exists for this show command, and results in data like so:
You MUST use a RegEx Pattern (and Robot's Get Regexp Matches keyword) for this `{{ command_data.command }}` command. Pay attention to the Parsing Requirements.

```robotframework
{% if command_data.genai_regex_pattern %}
{{ command_data.genai_regex_pattern }}
{% else %}

{% endif %}
```

Mocked Regex Data:

```json
{% if command_data.parsed_output %}
{{ command_data.parsed_output }}
{% else %}


{% endif %}
```
{% endif %}
{% endfor %}

The pass criteria would require:
{% if pass_criteria %}
{{ pass_criteria }}
{% else %}
* Pass Criteria 1
* Pass Criteria 2
* Pass Criteria X...
{% endif %}

The fail criteria would require:
* One or more pass criteria are not met

Here's the "expected data" the script will access to compare against the "current data". The DUTS dictionary of dictionaries as seen below structure will always be present.
The schema of these variables must not change and it's crucial for the data returned by the "Gather Parameters" keyword to align with this schema:

```yaml
{% if jobfile_parameters %}
{{ jobfile_parameters }}
{% else %}
device_connectivity_type: ssh
DUTS:
  Router-1:
    variable1: 1
    variable2: 2
  Router-2:
    variable1: 3
    variable2: 4
{% endif %}
```

A mapping of how the keys in the above expected data can be accessed through the structured data is shown below:

```
{% if jobfile_parameters_mapping%}
{{ jobfile_parameters_mapping}}
{% else %}

{% endif %}
```
