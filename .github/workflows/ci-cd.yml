name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Format and lint Python
        run: uv run pre-commit run --all-files --show-diff-on-failure

      - name: Run tests
        run: uv run pytest

  # deploy-docs:
  #   needs: test
  #   if: github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'

  #     - name: Install uv
  #       run: |
  #         curl -LsSf https://astral.sh/uv/install.sh | sh
  #         echo "$HOME/.cargo/bin" >> $GITHUB_PATH

  #     - name: Install dependencies
  #       run: |
  #         uv venv .venv
  #         source .venv/bin/activate
  #         uv pip install -e ".[docs]"

  #     - name: Deploy docs
  #       run: |
  #         source .venv/bin/activate
  #         mkdocs gh-deploy --force

  # release:
  #   needs: [test]
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Create latest tag
  #       run: |
  #         git config user.name github-actions
  #         git config user.email github-actions@github.com
  #         git tag -f latest
  #         git push --force origin latest

  notify:
    needs: [test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: ${{ contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') }}
        run: |
          echo "## âœ¨ Pipeline Built Successfully âœ¨"
          echo "* [Workflow Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      - name: Notify failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "## ðŸ’€ Pipeline Build Failure ðŸ’€"
          echo "* [Workflow Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      # Optional Webex notification (uncomment when ready)
      # - name: Send Webex notification
      #   if: env.WEBEX_ROOM_ID != ''
      #   uses: cisco-open/webex-notification-action@v1
      #   with:
      #     webex-token: ${{ secrets.WEBEX_TOKEN }}
      #     webex-room-id: ${{ env.WEBEX_ROOM_ID }}
      #     message: ${{ contains(needs.*.result, 'failure') && '## ðŸ’€ Pipeline Build Failure ðŸ’€' || '## âœ¨ Pipeline Built Successfully âœ¨' }}
      #   env:
      #     WEBEX_ROOM_ID: "" # Add your Webex room ID here if needed
